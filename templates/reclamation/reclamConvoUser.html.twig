
{% extends 'base.html.twig' %}

{% block css %}
  {{ parent() }}
  <link rel="stylesheet" href="{{ asset('css/convo.css') }}" />
{% endblock %}

{% block title %}Réclamations{% endblock %}

{% block body %}
  <nav class="navbar navbar-expand-lg">
        <div class="container">
            <a class="navbar-brand" href="{{ path('app_home') }}">
                Eventura
            </a>
            <form class="search-form" action="/search" method="GET" style="
                display: flex;
                align-items: center;
                background-color: #f8f6fa;
                border: 1px solid #e0e0e0;
                border-radius: 50px;
                padding: 8px 12px;
                width: 600px;
                margin: 20px auto;
                box-sizing: border-box;
            ">
                <i class="fas fa-search" style="color: #55546d; margin: 0 10px;"></i>
                <input 
                    type="search" 
                    name="query" 
                    placeholder="Rechercher des événements" 
                    style="
                        border: none;
                        outline: none;
                        background: transparent;
                        font-size: 16px;
                        flex: 1;
                        color: #55546d;
                    " 
                />
                <div style="
                    height: 10px;
                    width: 1px;
                    background-color: #ccc;
                    margin: 0 15px;
                "></div>
                <div style="display: flex; align-items: center; color: #55546d; font-size: 16px;">
                    <i class="fas fa-map-marker-alt" style="margin-right: 6px;"></i>
                    <span>Tunis</span>
                </div>
                <button type="submit" style="
                    background-color: #bd4c33;
                    color: white;
                    border: none;
                    border-radius: 50%;
                    width: 30px;
                    height: 30px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    margin-left: 10px;
                    cursor: pointer;
                ">
                    <i class="fas fa-search"></i>
                </button>
            </form>

            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>

            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav align-items-lg-center ms-auto me-lg-5">
                    <!-- Add any additional navbar items here -->
                </ul>
                <div class="d-flex gap-2">
                     {{ include('service/sidebarPart.html.twig') }}
                </div>
            </div>
        </div>
    </nav>

<div class="container mt-5">
    <div class="container">
        <div class="page-inner">
          <div class="reclam-convo">
           <!--  <h1>Reclamation ID: {{ reclamation.id }} -->
            </h1>
  
            <div class="parent-convo">
              <div class="messagerie-reclam"> 
  <!--               <div class="zone-messages">
                  {% for message in messages %}
                      <div class="{% if message.sender_id == 1 %}message-left{% else %}message-right{% endif %}">
                          <div class="message-bubble">
                              {{ message.message }}
                          </div>
                      </div>
                  {% else %}
                      <p style="text-align:center; color:white">Pas de messages envoyés.</p>
                  {% endfor %}
              </div> -->
              <div class="zone-messages">
                {% for message in messages %}
  
                {% set attachmentData = [] %}
                  {% for a in message.messageAttachments %}
                  {% set attachmentData = attachmentData|merge([{ id: a.id, filePath: a.filePath }]) %}
                  {% endfor %}
                  <div class="{% if message.sender_id == userid %}message-left{% else %}message-right{% endif %}">
                    <div class="message-bubble"
                    onclick="openCategoryPopup(this)"
                    data-id="{{ message.id }}"
                    data-message="{{ message.message|e('html_attr') }}"
                    data-attachments='{{ attachmentData|json_encode() }}'>
  
                      <div class="message-text">
                        {{ message.message }}
                      </div>
              
                      {% if message.messageAttachments|length > 0 %}
                      <div class="message-attachments" style="margin-top: 10px;">
                          {% for attachment in message.messageAttachments %}
                            {% set filePath = 'ImagesConversations/' ~ attachment.filePath %}
                            {% if attachment.filePath matches '/\.(jpe?g|png|gif)$/i' %}
                              <img src="{{ asset(filePath) }}" alt="image" style="max-width: 120px; max-height: 120px; margin-right: 5px; border-radius: 6px;" />
                            {% else %}
                              <a href="{{ asset(filePath) }}" target="_blank" style="display: block; color: #0056b3; font-weight: bold;">
                                📎 {{ attachment.filePath }}
                              </a>
                            {% endif %}
                          {% endfor %}
                        </div>
                      {% endif %}
                    </div>
                  </div>
                {% else %}
                  <p>No messages yet.</p>
                {% endfor %}
              </div>
  
              <div id="categoryPopup" class="category-popup">
                <div class="category-popup-content p-4 rounded shadow bg-white">
                  <!-- Close Button -->
                  <button type="button" class="btn-close position-absolute top-0 end-0 m-3" aria-label="Close" onclick="closeCategoryPopup()"></button>
              
                  <input type="hidden" id="popup-message-id">
  
                  <h6>Message:</h6>
                  <textarea id="popup-message-text" class="form-control mb-3"></textarea>
                  
                  <h6>Pièces jointes:</h6>
                  <table class="table" id="nonImageAttachments"></table>
                  
                  <h6>Images</h6>
                  <div id="imageAttachments" style="display: flex; gap: 10px; flex-wrap: wrap;"></div>
                  
                  <button class="btn btn-success mt-3" onclick="saveMessage()">Sauvegarder</button>
                  <button class="btn btn-danger mt-3" onclick="deleteMessage()">Supprimer le message</button>
    
                </div>
              </div>
          
              
              
  
  
  
  
  

            

              <div class="zone-writing mt-2">

                {{ form_start(form, {
                  action: path('reclamation_conversation_send_user', { id: reclamation.id }),
                  attr: { enctype: 'multipart/form-data', class: 'w-100' },
                  method: 'POST'
                }) }}
              
                <div class="d-flex align-items-center gap-2">
              
                  <!-- Attachment Button -->
                  <label class="btn btn-outline-secondary d-flex align-items-center mb-0">
                    📎
                    {{ form_widget(form.attachments, {
                      attr: {
                        multiple: true,
                        class: 'd-none',
                        id: 'live-attachments'
                      }|merge(reclamation.status == 'Résolu' ? {'disabled': 'disabled'} : {})
                    }) }}
                  </label>
              
                  <!-- Text Input -->
                  <div class="flex-grow-1">
                    {{ form_widget(form.message, {
                      attr: {
                        class: 'form-control',
                        placeholder: 'Écrivez votre message ici...'
                      }|merge(reclamation.status == 'Résolu' ? {'disabled': 'disabled'} : {})
                    }) }}
                  </div>
              
                  <!-- Submit Button -->
                  <button
                    type="submit"
                    class="btn {{ reclamation.status == 'Résolu' ? 'btn-secondary' : 'btn-danger' }}"
                    {% if reclamation.status == 'Résolu' %}disabled{% endif %}>
                    Envoyer
                  </button>
                </div>
              
                <!-- File Label -->
                <span id="file-label"  style="display:none;">Aucun fichier choisi</span>
              
                <!-- Attachment Table Preview -->
                <div id="attachmentTableWrapper" class="mt-3" style="display: none;">
                  <table class="table table-bordered table-sm">
                    <thead class="table-light">
                      <tr>
                        <th>Nom du fichier</th>
                        <th style="width: 100px;">Action</th>
                      </tr>
                    </thead>
                    <tbody id="liveAttachmentPreview"></tbody>
                  </table>
                </div>
              
                {{ form_end(form) }}
              
              </div>


              </div>
    
    
              <div class="side-reclam-bar">
                <div class="profile">
                  <img src="https://via.placeholder.com/60" alt="Avatar">
                  <h3 style="color:white">Reclamateur: Haroun</h3>
                </div>
            
                <div class="icons">
                  <button title="Mute">🔇</button>
                </div>
            
                <div class="ticket-info">
                  <p style="color:white"><strong> Ticket N# {{reclamation.id}}</strong></p>
                  <p style="color:white">Sujet : {{reclamation.subject}} </p>
                  <p style="color:white">Description: {{reclamation.description}}</p>
                </div>
  
  
                {% set imageExtensions = ['jpg', 'jpeg', 'png', 'gif', 'webp'] %}
                {% set allImages = [] %}
                
                {% for msg in messages %}
                  {% for a in msg.messageAttachments %}
                    {% set ext = a.filePath|split('.')|last|lower %}
                    {% if ext in imageExtensions %}
                      {% set allImages = allImages|merge([a]) %}
                    {% endif %}
                  {% endfor %}
                {% endfor %}
  
  
                <div class="media-section">
                  <h4 style="color:white">Media</h4>
                  <div class="media-thumbnails" style="display: flex; gap: 10px; flex-wrap: wrap;">
                    {% if allImages|length > 0 %}
                      {% for img in allImages %}
                        <div style="width: 80px; height: 80px;">
                          <img src="{{ asset('ImagesConversations/' ~ img.filePath) }}" alt="media"
                          style="width: 100%; height: 100%; object-fit: cover; border-radius: 4px;"
                          onclick="showImagePopup('{{ asset('/ImagesConversations/' ~ img.filePath) }}')" />
                        </div>
                      {% endfor %}
                    {% else %}
                      <div style="color: #888; font-size: 12px;">Aucune image</div>
                    {% endif %}
                  </div>
                </div>
                      

              </div>
    
            </div>
            
  
  
  
  
          </div>
  
  
  
        </div>
      </div>


</div>



<script>
    document.addEventListener('DOMContentLoaded', function() {
      // Direct button binding instead of delegation
      document.querySelectorAll('.btn-warning[data-event-id]').forEach(btn => {
        btn.addEventListener('click', function() {
          const modal = document.getElementById('editEventModal');
          modal.classList.add('show');
          
          // Just for testing - remove after confirmation
          console.log('Modal should be visible now');
          document.getElementById('title').value = 'Test Title';
        });
      });
    
      // Close modal handlers
      document.querySelector('.close').addEventListener('click', function() {
        document.getElementById('editEventModal').classList.remove('show');
      });
    
      window.onclick = function(event) {
        const modal = document.getElementById('editEventModal');
        if (event.target === modal) {
          modal.classList.remove('show');
        }
      };
    });
    </script>
    
    
    
    
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    
    
    {% if showRatingPopup and reclamation.status|trim == 'Résolu' %}
    <script>
    document.addEventListener('DOMContentLoaded', function () {
        Swal.fire({
            title: 'Notez cette réclamation',
            showConfirmButton: false,
            showCloseButton: true,
            html: `
                <div class="star-rating" style="font-size: 2em; display: flex; gap: 10px; justify-content: center;">
                    <label for="rate1" style="cursor:pointer;">⭐</label>
                    <label for="rate2" style="cursor:pointer;">⭐</label>
                    <label for="rate3" style="cursor:pointer;">⭐</label>
                    <label for="rate4" style="cursor:pointer;">⭐</label>
                    <label for="rate5" style="cursor:pointer;">⭐</label>
    
                    <input type="radio" name="rating" value="1" id="rate1" style="display:none;">
                    <input type="radio" name="rating" value="2" id="rate2" style="display:none;">
                    <input type="radio" name="rating" value="3" id="rate3" style="display:none;">
                    <input type="radio" name="rating" value="4" id="rate4" style="display:none;">
                    <input type="radio" name="rating" value="5" id="rate5" style="display:none;">
                </div>
            `
        });
    
        // Bind click listeners directly after popup is shown
        setTimeout(() => {
            document.querySelectorAll('input[name="rating"]').forEach(input => {
                const label = document.querySelector(`label[for="${input.id}"]`);
                if (label) {
                    label.addEventListener('click', () => {
                        // Auto-submit on click
                        fetch("{{ path('rate_reclamation', { id: reclamation.id })|e('js') }}", {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-Requested-With': 'XMLHttpRequest'
                            },
                            body: JSON.stringify({ rating: input.value })
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                Swal.fire('Merci !', 'Votre note a été enregistrée.', 'success')
                                    .then(() => location.reload());
                            } else {
                                Swal.fire('Erreur', data.message, 'error');
                            }
                        });
                    });
                }
            });
        }, 100); // allow DOM to fully render
    });
    </script>
    {% endif %}
    
    <script>
    document.addEventListener('DOMContentLoaded', function () {
    
      // Accept Button Logic
      document.querySelectorAll('.accept-button').forEach(button => {
        button.addEventListener('click', async function () {
          const row = button.closest('tr');
          const id = row.dataset.id;
    
          const res = await fetch(`/reclamation/${id}/accept`, {
            method: 'POST',
            headers: { 'X-Requested-With': 'XMLHttpRequest' }
          });
    
          if (res.ok) {
            row.querySelector('.status-cell').textContent = 'Accepté';
            Swal.fire('Succès', 'Réclamation acceptée.', 'success');
          } else {
            Swal.fire('Erreur', 'Une erreur est survenue.', 'error');
          }
        });
      });
    
      // Refuse Button Logic
      document.querySelectorAll('.refuse-button').forEach(button => {
        button.addEventListener('click', function () {
          const row = button.closest('tr');
          const id = row.dataset.id;
    
          Swal.fire({
            title: 'Motif du refus',
            input: 'textarea',
            inputLabel: 'Veuillez indiquer la raison du refus.',
            inputPlaceholder: 'Entrez votre raison ici...',
            inputAttributes: {
              'aria-label': 'Raison du refus'
            },
            showCancelButton: true,
            confirmButtonText: 'Envoyer',
            cancelButtonText: 'Annuler',
            inputValidator: (value) => {
              if (!value) {
                return 'Vous devez entrer une raison.';
              }
            }
          }).then(async (result) => {
            if (result.isConfirmed) {
              const reason = result.value;
    
              const res = await fetch(`/reclamation/${id}/refuse`, {
                method: 'POST',
                headers: {
                  'X-Requested-With': 'XMLHttpRequest',
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({ reason })
              });
    
              if (res.ok) {
                row.querySelector('.status-cell').textContent = 'Réfusé';
                Swal.fire('Réclamation refusée', 'Le motif a été enregistré.', 'success');
              } else {
                Swal.fire('Erreur', 'Impossible d’enregistrer le refus.', 'error');
              }
            }
          });
        });
      });
    
    });
    </script>
    
    <script>
      const fileInput = document.querySelector('input[type="file"]');
      const fileLabel = document.getElementById('file-label');
      fileInput.addEventListener('change', function () {
        fileLabel.innerText = fileInput.files.length > 0
          ? Array.from(fileInput.files).map(f => f.name).join(', ')
          : 'Aucun fichier choisi';
      });
    
    </script>
    
    <script>
    function openCategoryPopup(el) {
    
      document.getElementById('categoryPopup').classList.add('open');
    
    
      const id = el.dataset.id;
      const msg = el.dataset.message;
      const attachments = JSON.parse(el.dataset.attachments);
    
      document.getElementById('popup-message-id').value = id;
      document.getElementById('popup-message-text').value = msg;
    
      // Reset containers
      const table = document.getElementById('nonImageAttachments');
      const grid = document.getElementById('imageAttachments');
      table.innerHTML = '';
      grid.innerHTML = '';
    
      attachments.forEach(att => {
      const isImage = att.filePath.match(/\.(jpe?g|png|gif)$/i);
      const path = '/ImagesConversations/' + att.filePath;
    
    if (isImage) {
      const imgBox = document.createElement('div');
      imgBox.classList.add('img-box');
      imgBox.innerHTML = `
        <img src="${path}" class="img-thumbnail" style="max-width: 100px; max-height: 100px;" />
        <button class="btn btn-sm btn-danger delete-img-btn" onclick="deleteAttachment(${att.id})">✖</button>
      `;
      grid.appendChild(imgBox);
    } else {
        const row = document.createElement('tr');
        row.innerHTML = `
          <td><a href="${path}" target="_blank">${att.filePath}</a></td>
          <td><button style="color:black" class="btn btn-sm btn-danger" onclick="deleteAttachment(${att.id})">Supprimer</button></td>
        `;
        table.appendChild(row);
      }
    });
    
    
      
    }
    
    
    function closeCategoryPopup() {
      document.getElementById('categoryPopup').classList.remove('open');
    }
    
    
    function deleteAttachment(id) {
      if (!confirm("Supprimer ce fichier ?")) return;
    
      fetch(`/conversation/attachment/${id}/delete`, {
        method: 'DELETE'
      }).then(() => location.reload());
    }
    
    
    function saveMessage() {
      const id = document.getElementById('popup-message-id').value;
      const msg = document.getElementById('popup-message-text').value;
    
      fetch(`/conversation/message/${id}/update`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        body: 'message=' + encodeURIComponent(msg)
      }).then(() => location.reload());
    }
    
    function deleteMessage() {
      const id = document.getElementById('popup-message-id').value;
      if (!confirm('Supprimer ce message ?')) return;
    
      fetch(`/conversation/message/${id}/delete`, {
        method: 'DELETE'
      }).then(() => location.reload());
    }
    
    
     </script>
    
    
    
    <script>
      document.addEventListener('DOMContentLoaded', function () {
        const fileInput = document.querySelector('input[type="file"][multiple]');
        const previewTable = document.getElementById('attachmentTableWrapper');
        const previewTableBody = document.getElementById('liveAttachmentPreview');
        const fileLabel = document.getElementById('file-label');
        let selectedFiles = [];
      
        fileInput.addEventListener('change', function () {
          selectedFiles = Array.from(fileInput.files);
          updatePreviewTable();
        });
      
        function updatePreviewTable() {
          previewTableBody.innerHTML = '';
      
          if (selectedFiles.length === 0) {
            previewTable.style.display = 'none';
            fileLabel.textContent = 'Aucun fichier choisi';
            return;
          }
      
          previewTable.style.display = 'block';
          fileLabel.textContent = `${selectedFiles.length} fichier(s) sélectionné(s)`;
      
          selectedFiles.forEach((file, index) => {
            const row = document.createElement('tr');
            row.innerHTML = `
              <td><h6 style="color: white;">${file.name}</h6>
 </td>
              <td>
                <button type="button" class="btn btn-sm btn-danger" onclick="removeAttachment(${index})">
                  Supprimer
                </button>
              </td>
            `;
            previewTableBody.appendChild(row);
          });
      
          // Sync with input
          const dataTransfer = new DataTransfer();
          selectedFiles.forEach(file => dataTransfer.items.add(file));
          fileInput.files = dataTransfer.files;
        }
      
        window.removeAttachment = function (index) {
          selectedFiles.splice(index, 1);
          updatePreviewTable();
        };
      });


      function showImagePopup(imageUrl) {
      const popup = document.getElementById('imagePopup');
      const img = document.getElementById('popupImage');
      img.src = imageUrl;
      popup.classList.add('open');
    }
    
    function closeImagePopup() {
      document.getElementById('imagePopup').classList.remove('open');
    }
    


      </script>



<script>


    
    </script>

{% endblock %}