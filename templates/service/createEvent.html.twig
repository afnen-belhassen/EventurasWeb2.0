{% extends 'base.html.twig' %}

{% block title %}Créer votre événement{% endblock %}

{% block css %}
    {{ parent() }}
    <style>
        .event-form {
            background-color: #f8f9fa; /* Light background for the form */
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        .event-form h2 {
            color: #343a40; /* Dark color for the heading */
        }
        .form-control {
            border-radius: 5px;
        }
        .btn-custom {
            background-color: #007bff; /* Primary color */
            color: white;
        }
        .btn-custom:hover {
            background-color: #0056b3; /* Darker shade on hover */
        }
        .form-error {
            color: red;
            font-size: 0.9em;
            margin-bottom: 5px; /* Add some space below the error message */
        }
    </style>
{% endblock %}

{% block body %}
    <nav class="navbar navbar-expand-lg">
        <div class="container">
            <a class="navbar-brand" href="{{ path('app_home') }}">
                Eventura
            </a>

            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>

            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav align-items-lg-center ms-auto me-lg-5">
                    <li class="nav-item">
                        <a class="nav-link click-scroll" href="#section_4">Contact</a>
                    </li>
                </ul>

                <div class="d-flex gap-2">
                    <a href="{{ path('app_event_new') }}" class="btn custom-btn d-lg-block d-none">
                        <i class="bi bi-plus-circle me-2"></i>Créer Événement
                    </a>
                    <a href="{{ path('app_show_all_events') }}"class="btn custom-btn d-lg-block d-none">Vos événements</a>
                   {{ include('service/sidebar.html.twig') }}
                </div>
            </div>
        </div>
    </nav>

    <div class="container mt-5">
         <div class="event-form">
    {{ form_start(form, {'attr': {'novalidate': 'novalidate'}}) }}

        <div class="mb-3">
            {{ form_row(form.title, {
                'attr': {'class': 'form-control' ~ (form.title.vars.errors|length > 0 ? ' is-invalid' : '')}
            }) }}
        </div>

        <div class="mb-3">
            {{ form_row(form.description, {
                'attr': {'class': 'form-control' ~ (form.description.vars.errors|length > 0 ? ' is-invalid' : '')}
            }) }}
        </div>

        <div class="mb-3">
            {{ form_row(form.date_event, {
                'attr': {'class': 'form-control' ~ (form.date_event.vars.errors|length > 0 ? ' is-invalid' : '')}
            }) }}
        </div>

        <div class="mb-3">
            {{ form_row(form.date_finEve, {
                'attr': {'class': 'form-control' ~ (form.date_finEve.vars.errors|length > 0 ? ' is-invalid' : '')}
            }) }}
        </div>

        <div class="mb-3">
            {{ form_row(form.location, {
                'attr': {'id': 'location', 'class': 'form-control' ~ (form.location.vars.errors|length > 0 ? ' is-invalid' : '')}
            }) }}
        </div>

        <!-- Add a visible input field for the location -->
        <div class="mb-3">
            <input type="text" id="location" class="form-control" placeholder="Location" readonly>
        </div>

        <input type="hidden" id="latitude" name="event[latitude]">
        <input type="hidden" id="longitude" name="event[longitude]">

        <div id="map" style="height: 400px; margin-bottom: 20px;"></div>

        <div class="mb-3">
            {{ form_row(form.category, {
                'attr': {'class': 'form-control' ~ (form.category.vars.errors|length > 0 ? ' is-invalid' : '')}
            }) }}
        </div>

        <div class="mb-3">
            {{ form_row(form.image, {
                'attr': {'class': 'form-control' ~ (form.image.vars.errors|length > 0 ? ' is-invalid' : '')}
            }) }}
        </div>

        <div class="mb-3">
            {{ form_row(form.activities, {
                'attr': {'class': 'form-control' ~ (form.activities.vars.errors|length > 0 ? ' is-invalid' : '')}
            }) }}
        </div>

        <div class="mb-3">
            {{ form_row(form.prix, {
                'attr': {'class': 'form-control' ~ (form.prix.vars.errors|length > 0 ? ' is-invalid' : '')}
            }) }}
        </div>

        <div class="mb-3">
            {{ form_row(form.nb_places, {
                'attr': {'class': 'form-control' ~ (form.nb_places.vars.errors|length > 0 ? ' is-invalid' : '')}
            }) }}
        </div>

        <div class="mb-3">
            <button type="submit" class="btn btn-custom">Créer l'événement</button>
        </div>

    {{ form_end(form) }}
    {% if google_maps_api_key is empty %}
    <div class="alert alert-warning">Google Maps ne peut pas être chargé sans une clé API.</div>
    {% endif %}
</div>

<script src="https://maps.googleapis.com/maps/api/js?key={{ google_maps_api_key }}&libraries=places&callback=initMap" async defer></script>

<script>
    let map, marker, geocoder;

    function initMap() {
        geocoder = new google.maps.Geocoder();
        const defaultPosition = { lat: 36.8065, lng: 10.1815 }; // Tunis

        map = new google.maps.Map(document.getElementById("map"), {
            center: defaultPosition,
            zoom: 12,
        });

        marker = new google.maps.Marker({
            position: defaultPosition,
            map: map,
            draggable: true,
        });

        // Initial update
        updateFields(defaultPosition);

        // Update on marker drag
        marker.addListener("dragend", () => {
            updateFields(marker.getPosition());
        });

        // Update on map click
        map.addListener("click", (e) => {
            marker.setPosition(e.latLng);
            updateFields(e.latLng);
        });
    }

    function updateFields(position) {
        const latLng = position instanceof google.maps.LatLng 
            ? position 
            : new google.maps.LatLng(position.lat, position.lng);

        const lat = latLng.lat();
        const lng = latLng.lng();
        document.getElementById('latitude').value = lat;
        document.getElementById('longitude').value = lng;

        geocoder.geocode({ location: latLng }, (results, status) => {
            const locationField = document.getElementById('location');
            if (locationField) { // Ensure locationField exists
                if (status === 'OK' && results[0]) {
                    locationField.value = results[0].formatted_address;
                } else {
                    locationField.value = "Adresse introuvable";
                }
            }
        });
    }
</script>

{% endblock %}
